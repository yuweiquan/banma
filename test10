public class TestMybatis {
	
		private SqlSessionFactory sqlSessionFactory = null;

		@Before
		public void init() throws Exception {
			// 1. 创建SqlSessionFactoryBuilder对象
			SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();

			// 2. 加载SqlMapConfig.xml配置文件
			InputStream inputStream = Resources.getResourceAsStream("sqlMapConfig.xml");

			// 3. 创建SqlSessionFactory对象
			this.sqlSessionFactory = sqlSessionFactoryBuilder.build(inputStream);
		}
		@Test
		public void testQueryUserById() throws Exception {
			// 4. 创建SqlSession对象
			SqlSession sqlsession = sqlSessionFactory.openSession();

			// 5. 执行SqlSession对象执行查询，获取结果User
			// 第一个参数是User.xml的statement的id，第二个参数是执行sql需要的参数；
			//Object user = sqlsession.selectOne("findUserById", 6l);
			//List<User> list = sqlsession.selectList("findUserAll");
			List<User> list = sqlsession.selectList("findUserByName", "%红%");

			// 6. 打印结果
			//System.out.println(user);
			for (User user : list) {
				System.out.println(user);
			}

			// 7. 释放资源
			sqlsession.close();
		}
		
		@Test
		public void testCRUD() throws Exception {
			// 4. 创建SqlSession对象
			SqlSession sqlsession = sqlSessionFactory.openSession();
            User u=new User();
            u.setUser_id(5l);
            u.setUser_name("姚明明明");
			u.setUser_code("123456");
            u.setUser_password("2314569");
            u.setUser_state("0");
           // int insert = sqlsession.insert("addUser",u);
            int update = sqlsession.update("updateUser",u);
            // int delete = sqlsession.delete("deleteUser",6l);
            System.out.println(update);
            sqlsession.commit();
 			// 7. 释放资源
			sqlsession.close();
		}
	
		
		@Test
		public void testqueryByCondition() throws Exception {
			// 4. 创建SqlSession对象
			SqlSession sqlsession = sqlSessionFactory.openSession();
           //使用sqlsession对象获得mapper接口的动态代理的实现类对象
			UserMapper mapper = sqlsession.getMapper(UserMapper.class);
			Condition cond =new Condition();
			User u=new User();
	            u.setUser_id(7l);
	            u.setUser_name("明");
				cond.setU(u);
	           List<User> list = mapper.queryByCondition(cond);
	           for (User user : list) {
				System.out.println(user);
			}
           
		}
}
